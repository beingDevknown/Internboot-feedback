// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineAssessment.Web.Models;

#nullable disable

namespace OnlineAssessment.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250819074750_AddFeedbackTable")]
    partial class AddFeedbackTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("OnlineAssessment.Web.Models.CategoryQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBySapId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrganizationSapId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("QuestionsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CategoryQuestions_CreatedAt");

                    b.HasIndex("OrganizationSapId");

                    b.HasIndex("Category", "CreatedBySapId")
                        .HasDatabaseName("IX_CategoryQuestions_Category_CreatedBySapId");

                    b.ToTable("CategoryQuestions");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.CertificatePurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CertificateGeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserSapId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TestResultId")
                        .IsUnique()
                        .HasDatabaseName("IX_CertificatePurchases_TestResultId_Unique");

                    b.ToTable("certificatepurchases");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserSapId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserSapId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Organization", b =>
                {
                    b.Property<string>("SapId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsOtpVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuperOrganization")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTokenActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationToken")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TokenGeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("SapId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Email_Unique");

                    b.HasIndex("OrganizationToken")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Token_Unique");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_PhoneNumber_Unique");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Username_Unique");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserSapId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserSapId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.SpecialUser", b =>
                {
                    b.Property<string>("UsersSapId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Employment")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizationSapId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UsersSapId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_SpecialUsers_Email_Unique");

                    b.HasIndex("OrganizationSapId");

                    b.ToTable("specialusers");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryQuestionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBySapId")
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentUserCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("HasUploadedFile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsScheduleRestricted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsersPerSlot")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationSapId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ShareId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationSapId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.TestBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StatusReason")
                        .HasColumnType("longtext");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserSapId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TestId", "UserSapId", "Status")
                        .HasDatabaseName("IX_TestBookings_TestId_UserSapId_Status");

                    b.ToTable("TestBookings");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<double>("CodingScore")
                        .HasColumnType("double");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("McqScore")
                        .HasColumnType("double");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<string>("UserSapId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserSapId");

                    b.ToTable("testresult");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.User", b =>
                {
                    b.Property<string>("SapId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Employment")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("InternshipDuration")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsOtpVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KeySkills")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrganizationSapId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SapId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email_Unique");

                    b.HasIndex("MobileNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_MobileNumber_Unique");

                    b.HasIndex("OrganizationSapId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username_Unique");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.CategoryQuestions", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Organization", null)
                        .WithMany("CategoryQuestions")
                        .HasForeignKey("OrganizationSapId");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.CertificatePurchase", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.TestResult", "TestResult")
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Feedback", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserSapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Payment", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserSapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.SpecialUser", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationSapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Test", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Organization", null)
                        .WithMany("Tests")
                        .HasForeignKey("OrganizationSapId");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.TestBooking", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.TestResult", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAssessment.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserSapId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OnlineAssessment.Web.Models.SpecialUser", "SpecialUser")
                        .WithMany()
                        .HasForeignKey("UserSapId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SpecialUser");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.User", b =>
                {
                    b.HasOne("OnlineAssessment.Web.Models.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationSapId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Organization", b =>
                {
                    b.Navigation("CategoryQuestions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("OnlineAssessment.Web.Models.Test", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
