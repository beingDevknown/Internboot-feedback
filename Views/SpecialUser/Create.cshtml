@model OnlineAssessment.Web.Models.DTOs.CreateSpecialUserRequest

@{
    ViewData["Title"] = "Create Special User";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">
                        <i class="fas fa-user-plus me-2"></i>Create Special User
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="createForm">
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Email" class="form-label">
                                        Email Address <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="Email" type="email" class="form-control" placeholder="Enter email address" />
                                    <div class="form-text">This will be used for login. Must be unique.</div>
                                    <span asp-validation-for="Email" class="text-danger"></span>
                                    <div id="emailFeedback" class="form-text"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Username" class="form-label">
                                        User Name <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="Username" class="form-control" placeholder="Enter display name" />
                                    <div class="form-text">This will be used for display purposes. Must be unique.</div>
                                    <span asp-validation-for="Username" class="text-danger"></span>
                                    <div id="usernameFeedback" class="form-text"></div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="FullName" class="form-label">
                                Full Name <span class="text-danger">*</span>
                            </label>
                            <input asp-for="FullName" class="form-control" placeholder="Enter full name" />
                            <div class="form-text">Enter the complete name of the special user.</div>
                            <span asp-validation-for="FullName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Password" class="form-label">
                                Password <span class="text-danger">*</span>
                            </label>
                            <div class="input-group">
                                <input asp-for="Password" type="password" class="form-control" placeholder="Enter password" />
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword()">
                                    <i class="fas fa-eye" id="passwordToggleIcon"></i>
                                </button>
                            </div>
                            <div class="form-text">Minimum 6 characters required.</div>
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="MobileNumber" class="form-label">Mobile Number</label>
                            <input asp-for="MobileNumber" type="tel" class="form-control" placeholder="Enter mobile number" />
                            <span asp-validation-for="MobileNumber" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Education" class="form-label">Education Level</label>
                                    <select asp-for="Education" class="form-select">
                                        <option value="">Select Education Level</option>
                                        <option value="HighSchool">High School (10th)</option>
                                        <option value="SeniorSecondary">Senior Secondary (12th)</option>
                                        <option value="Graduate">Graduate</option>
                                        <option value="PostGraduate">Post Graduate</option>
                                        <option value="Doctorate">Doctorate</option>
                                    </select>
                                    <span asp-validation-for="Education" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Employment" class="form-label">Employment Status</label>
                                    <select asp-for="Employment" class="form-select">
                                        <option value="">Select Employment Status</option>
                                        <option value="Student">Student</option>
                                        <option value="Employed">Employed</option>
                                        <option value="SelfEmployed">Self Employed</option>
                                        <option value="Unemployed">Unemployed</option>
                                        <option value="Fresher">Fresher</option>
                                    </select>
                                    <span asp-validation-for="Employment" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Category" class="form-label">Category</label>
                                    <select asp-for="Category" class="form-select">
                                        <option value="">Select Category</option>
                                        <option value="BFSI Internship">BFSI Internship</option>
                                        <option value="Digital Marketing  Internships">Digital Marketing  Internships</option>
                                        <option value="IT Internships">IT Internships</option>
                                        <option value="Relationship Executive Internships">Relationship Executive Internships</option>
                                        <option value="Business Development Internships">Business Development Internships</option>
                                        <option value="Sales Internships">Sales Internships</option>
                                        <option value="Portfolio Internships">Portfolio Internships</option>
                                        <option value="Web Development Internships">Web Development Internships</option>
                                        <option value="Software Development Internships">Software Development Internships</option>
                                        <option value="Pharma Intern">Pharma Intern</option>
                                        <option value="Medical Coding Intern">Medical Coding Intern</option>
                                        <option value="AI">AI</option>
                                        <option value="DataScience">DataScience</option>
                                        <option value="Cybersecurity">Cybersecurity</option>
                                        <option value="Human Resource">Human Resource</option>
                                        <option value="Financial Analyst">Financial Analyst</option>
                                        <option value="Data Analyst">Data Analyst</option>
                                    </select>
                                    <span asp-validation-for="Category" class="text-danger"></span>
                                    <div class="form-text">Category helps filter relevant tests for this user</div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter description or purpose for this special user"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="@Url.Action("Index")" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to List
                            </a>
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <i class="fas fa-save me-2"></i>Create Special User
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let emailCheckTimeout;
        let usernameCheckTimeout;

        document.getElementById('Email').addEventListener('input', function() {
            const email = this.value.trim();
            const feedback = document.getElementById('emailFeedback');
            const submitBtn = document.getElementById('submitBtn');

            // Clear previous timeout
            clearTimeout(emailCheckTimeout);

            if (email.length < 3 || !email.includes('@@')) {
                feedback.innerHTML = '';
                return;
            }

            // Set new timeout
            emailCheckTimeout = setTimeout(() => {
                checkEmailAvailability(email);
            }, 500);
        });

        document.getElementById('Username').addEventListener('input', function() {
            const username = this.value.trim();
            const feedback = document.getElementById('usernameFeedback');
            const submitBtn = document.getElementById('submitBtn');

            // Clear previous timeout
            clearTimeout(usernameCheckTimeout);

            if (username.length < 3) {
                feedback.innerHTML = '';
                return;
            }

            // Set new timeout
            usernameCheckTimeout = setTimeout(() => {
                checkUsernameAvailability(username);
            }, 500);
        });

        function checkEmailAvailability(email) {
            const feedback = document.getElementById('emailFeedback');
            const submitBtn = document.getElementById('submitBtn');

            feedback.innerHTML = '<i class="fas fa-spinner fa-spin text-primary"></i> Checking availability...';

            fetch(`/SpecialUser/api/check-email?email=${encodeURIComponent(email)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.available) {
                        feedback.innerHTML = '<i class="fas fa-check text-success"></i> Email is available';
                        feedback.className = 'form-text text-success';
                    } else {
                        feedback.innerHTML = '<i class="fas fa-times text-danger"></i> Email is already registered';
                        feedback.className = 'form-text text-danger';
                    }
                    checkFormValidity();
                })
                .catch(error => {
                    console.error('Error checking email:', error);
                    feedback.innerHTML = '<i class="fas fa-exclamation-triangle text-warning"></i> Error checking availability';
                    feedback.className = 'form-text text-warning';
                    checkFormValidity();
                });
        }

        function checkUsernameAvailability(username) {
            const feedback = document.getElementById('usernameFeedback');
            const submitBtn = document.getElementById('submitBtn');

            feedback.innerHTML = '<i class="fas fa-spinner fa-spin text-primary"></i> Checking availability...';

            fetch(`/SpecialUser/api/check-username?username=${encodeURIComponent(username)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.available) {
                        feedback.innerHTML = '<i class="fas fa-check text-success"></i> Username is available';
                        feedback.className = 'form-text text-success';
                    } else {
                        feedback.innerHTML = '<i class="fas fa-times text-danger"></i> Username is already taken';
                        feedback.className = 'form-text text-danger';
                    }
                    checkFormValidity();
                })
                .catch(error => {
                    console.error('Error checking username:', error);
                    feedback.innerHTML = '<i class="fas fa-exclamation-triangle text-warning"></i> Error checking availability';
                    feedback.className = 'form-text text-warning';
                    checkFormValidity();
                });
        }

        function checkFormValidity() {
            const emailFeedback = document.getElementById('emailFeedback');
            const usernameFeedback = document.getElementById('usernameFeedback');
            const submitBtn = document.getElementById('submitBtn');

            // Only disable if there are explicit errors (text-danger), not if checks haven't been performed
            const emailHasError = emailFeedback.className.includes('text-danger');
            const usernameHasError = usernameFeedback.className.includes('text-danger');

            const shouldDisable = emailHasError || usernameHasError;
            submitBtn.disabled = shouldDisable;

            console.log('Form validity check:', {
                emailHasError,
                usernameHasError,
                submitDisabled: shouldDisable
            });
        }

        function togglePassword() {
            const passwordInput = document.getElementById('Password');
            const toggleIcon = document.getElementById('passwordToggleIcon');

            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.className = 'fas fa-eye-slash';
            } else {
                passwordInput.type = 'password';
                toggleIcon.className = 'fas fa-eye';
            }
        }

        // Ensure submit button is enabled by default
        document.addEventListener('DOMContentLoaded', function() {
            const submitBtn = document.getElementById('submitBtn');
            if (submitBtn) {
                submitBtn.disabled = false;
                console.log('Submit button enabled by default');
            }
        });

        // Form validation
        document.getElementById('createForm').addEventListener('submit', function(e) {
            console.log('Form submission attempted');
            const email = document.getElementById('Email').value.trim();
            const username = document.getElementById('Username').value.trim();
            const fullName = document.getElementById('FullName').value.trim();
            const password = document.getElementById('Password').value;

            if (!email || !email.includes('@@')) {
                e.preventDefault();
                console.log('Form validation failed: Invalid email');
                alert('Please enter a valid email address.');
                return;
            }

            if (username.length < 3) {
                e.preventDefault();
                console.log('Form validation failed: Username too short');
                alert('Username must be at least 3 characters long.');
                return;
            }

            if (fullName.length < 2) {
                e.preventDefault();
                console.log('Form validation failed: Full name too short');
                alert('Full name must be at least 2 characters long.');
                return;
            }

            if (password.length < 6) {
                e.preventDefault();
                console.log('Form validation failed: Password too short');
                alert('Password must be at least 6 characters long.');
                return;
            }

            console.log('Form validation passed, submitting form');
        });
    </script>
}

<style>
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .form-label {
        font-weight: 500;
    }

    .text-danger {
        font-size: 0.875em;
    }

    .input-group .btn {
        border-left: none;
    }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
</style>
