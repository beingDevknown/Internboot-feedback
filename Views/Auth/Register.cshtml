@model OnlineAssessment.Web.Models.RegisterRequest

@{
    ViewData["Title"] = "Register";
    Layout = "_LoginLayout";
}

@section Styles {
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .simple-footer {
            margin-top: auto;
        }

        .register-section {
            background: #ffffff; /* White background */
            min-height: calc(100vh - 80px);
            display: flex;
            align-items: center;
            padding: 2rem 0;
        }

        .card {
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background: #3498db;
            color: white;
            border: none;
            padding: 1.5rem;
        }

        .card-body {
            background: white;
            padding: 2rem;
        }

        .btn-primary {
            background-color: #3498db;
            border: none;
            padding: 0.8rem 2rem;
            font-weight: 600;
            border-radius: 50px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(52, 152, 219, 0.4);
        }

        .form-control {
            border-radius: 8px;
            padding: 0.8rem 1rem;
        }

        .input-group-text {
            border-radius: 8px;
        }

        a {
            color: #3498db;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        a:hover {
            color: #2980b9;
        }

        /* Validation styling */
        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .form-control.is-invalid:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        }

        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .was-validated .form-control:invalid ~ .invalid-feedback,
        .form-control.is-invalid ~ .invalid-feedback {
            display: block;
        }

        .was-validated .form-control:invalid,
        .form-control.is-invalid {
            border-color: #dc3545;
        }

        .was-validated .form-check-input:invalid,
        .form-check-input.is-invalid {
            border-color: #dc3545;
        }

        .was-validated .form-check-input:invalid ~ .form-check-label,
        .form-check-input.is-invalid ~ .form-check-label {
            color: #dc3545;
        }
    </style>
}

<div class="register-section">
    <div class="container">
        <!-- Ad Unit at Top of Register Page -->
        <div class="row mb-4">
            <div class="col-12">
                @await Html.PartialAsync("_AdUnit")
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="login-logo">
                    <img src="~/images/InternBoot.png" alt="InternBoot Logo" class="logo-img" style="max-width: 250px; height: auto; margin-bottom: 15px;" />
                </div>
                <div class="card rounded-4 overflow-hidden">
                    <div class="card-header text-center">
                        <h3 class="mb-0">Create Account</h3>
                    </div>
                    <div class="card-body">
                        <form id="registerForm" enctype="multipart/form-data" class="needs-validation" novalidate>
                            <h4 class="mb-3">Basic Information</h4>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="firstName" class="form-label fw-bold">First Name</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-user text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" id="firstName" name="firstName" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="lastName" class="form-label fw-bold">Last Name</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-user text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" id="lastName" name="lastName" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="username" class="form-label fw-bold">Username</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-user-circle text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" id="username" name="username" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="email" class="form-label fw-bold">Email</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-envelope text-muted"></i>
                                            </span>
                                            <input type="email" class="form-control border-start-0" id="email" name="email" required>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="mobileNumber" class="form-label fw-bold">Mobile Number</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-phone text-muted"></i>
                                            </span>
                                            <input type="tel" class="form-control border-start-0" id="mobileNumber" name="mobileNumber" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="password" class="form-label fw-bold">Password</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-lock text-muted"></i>
                                            </span>
                                            <input type="password" class="form-control border-start-0" id="password" name="password" required>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <h4 class="mb-3 mt-4">Profile Information</h4>
                            <div class="mb-4">
                                <label for="profilePicture" class="form-label fw-bold">Profile Picture <span class="text-muted">(Optional)</span></label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white border-end-0">
                                        <i class="fas fa-image text-muted"></i>
                                    </span>
                                    <input type="file" class="form-control border-start-0" id="profilePicture" name="profilePicture" accept="image/jpeg,image/png,image/gif">
                                </div>
                                <small class="text-muted mt-1">Maximum file size: 5MB. Accepted formats: JPEG, PNG, GIF.</small>
                                <small class="d-block text-muted">If no image is uploaded or upload fails, a default profile image will be used.</small>
                            </div>
                            <div class="mb-4">
                                <label for="keySkills" class="form-label fw-bold">Key Skills</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-white border-end-0">
                                        <i class="fas fa-tools text-muted"></i>
                                    </span>
                                    <input type="text" class="form-control border-start-0" id="keySkills" name="keySkills" placeholder="e.g. Java, Python, SQL" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="employment" class="form-label fw-bold">Employment Status</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-briefcase text-muted"></i>
                                            </span>
                                            <select class="form-select border-start-0" id="employment" name="employment" required>
                                                <option value="">Select Status</option>
                                                <option value="Student">Student</option>
                                                <option value="Employed">Employed</option>
                                                <option value="SelfEmployed">Self Employed</option>
                                                <option value="Unemployed">Unemployed</option>
                                                <option value="Fresher">Fresher</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="education" class="form-label fw-bold">Education Level</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-graduation-cap text-muted"></i>
                                            </span>
                                            <select class="form-select border-start-0" id="education" name="education" required>
                                                <option value="">Select Education</option>
                                                <option value="HighSchool">10th (High School)</option>
                                                <option value="SeniorSecondary">12th (Senior Secondary)</option>
                                                <option value="Graduate">Graduate</option>
                                                <option value="PostGraduate">Post Graduate</option>
                                                <option value="Doctorate">Doctorate</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="category" class="form-label fw-bold">Category</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-tag text-muted"></i>
                                            </span>
                                            <select class="form-select border-start-0" id="category" name="category" required>
                                                <option value="">Select Category</option>
                                                <option value="Digital Marketing  Internships">Digital Marketing  Internships</option>                                               
                                                <option value="Business Development Internships">Business Development Internships</option>
                                                <option value="Sales Internships">Sales Internships</option>
                                                <option value="Portfolio Internships">Portfolio Internships</option>
                                                <option value="Web Development Internships">Web Development Internships</option>
                                                <option value="Software Development Internships">Software Development Internships</option>              
                                                <option value="DataScience">DataAnalyst/DataScience</option>
                                                <option value="Cybersecurity">Cybersecurity</option>
                                                <option value="Human Resource">Human Resource</option>
                                                <option value="Financial Analyst">Financial Analyst</option>                                            
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="InternshipDuration" class="form-label fw-bold">Internship Tenure (months)</label>
                                        <input type="number" class="form-control" id="InternshipDuration" name="InternshipDuration" min="1" placeholder="e.g., 6">
                                    </div>
                                </div>
                                <!-- Organization Token (Optional) -->
                                <div class="col-12">
                                    <div class="mb-4">
                                        <label for="organizationToken" class="form-label fw-bold">Organization Token (Optional)</label>
                                        <div class="input-group">
                                            <span class="input-group-text bg-white border-end-0">
                                                <i class="fas fa-key text-muted"></i>
                                            </span>
                                            <input type="text" class="form-control border-start-0" id="organizationToken" name="organizationToken"
                                                   placeholder="Enter organization token if provided">
                                        </div>
                                        <small class="text-muted">
                                            If you have an organization token, enter it here to be linked to that organization.
                                            Leave blank to register as a general user.
                                        </small>
                                    </div>
                                </div>

                                <!-- Role field removed as requested -->
                                <!-- Adding a hidden field for role instead -->
                                <input type="hidden" id="role" name="role" value="Candidate">
                            </div>
                            <div class="form-check mb-4">
                                <input class="form-check-input" type="checkbox" id="terms" required>
                                <label class="form-check-label" for="terms">
                                    I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>
                                </label>
                                <div class="invalid-feedback">
                                    You must agree to the terms and conditions to proceed.
                                </div>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    Register
                                </button>
                            </div>



                            <div class="text-center mt-4">
                                <p class="mb-0">Already have an account? <a href="/Auth/Login" class="fw-bold">Login here</a></p>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ad Unit at Bottom of Register Page -->
        <div class="row mt-4">
            <div class="col-12">
                @await Html.PartialAsync("_AdUnit")
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enable HTML5 validation styling
        (function() {
            'use strict';

            // Fetch all forms we want to apply validation styles to
            var forms = document.querySelectorAll('.needs-validation');

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms).forEach(function(form) {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        document.getElementById('registerForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Check if all required fields are filled
            const firstName = document.getElementById('firstName').value.trim();
            const lastName = document.getElementById('lastName').value.trim();
            const username = document.getElementById('username').value.trim();
            const email = document.getElementById('email').value.trim();
            const mobileNumber = document.getElementById('mobileNumber').value.trim();
            const password = document.getElementById('password').value.trim();
            const keySkills = document.getElementById('keySkills').value.trim();
            const employment = document.getElementById('employment').value;
            const education = document.getElementById('education').value;
            const category = document.getElementById('category').value;
            const terms = document.getElementById('terms').checked;
            const duration = document.getElementById('InternshipDuration').value;

            // Validate all fields
            if (!firstName || !lastName || !username || !email || !mobileNumber || !password || !keySkills || !employment || !education || !InternshipDuration || !category || !terms) {
                showToast('All fields are mandatory. Please fill in all required information.', 'error');
                return;
            }

            // Create form data object for file upload
            const fileFormData = new FormData();
            const profilePictureInput = document.getElementById('profilePicture');
            let hasProfilePicture = false;

            if (profilePictureInput.files.length > 0) {
                hasProfilePicture = true;
                fileFormData.append('profilePicture', profilePictureInput.files[0]);
                console.log('Profile picture selected:', profilePictureInput.files[0].name);
            }

            // Create JSON data for API
            const formData = {
                username: username,
                email: email,
                password: password,
                role: document.getElementById('role').value,
                firstName: firstName,
                lastName: lastName,
                mobileNumber: mobileNumber,
                keySkills: keySkills,
                employment: employment,
                education: education,
                category: category,
                InternshipDuration : duration,
                organizationToken: document.getElementById('organizationToken').value
            };

            try {
                let response;

                // Check if there's a profile picture to upload
                if (hasProfilePicture) {
                    // Validate file size before upload (client-side check)
                    const fileSize = profilePictureInput.files[0].size;
                    if (fileSize > 5 * 1024 * 1024) { // 5MB limit
                        showToast('Profile picture size must be less than 5MB.', 'error');
                        return;
                    }

                    // Validate file type
                    const fileType = profilePictureInput.files[0].type;
                    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                    if (!allowedTypes.includes(fileType.toLowerCase())) {
                        showToast('Only JPEG, PNG, and GIF images are allowed.', 'error');
                        return;
                    }

                    // Display a message to the user that their image will be uploaded
                    console.log('Profile picture validated successfully. Size: ' + (fileSize / 1024 / 1024).toFixed(2) + 'MB');

                    // Add all form fields to FormData for multipart/form-data submission
                    Object.keys(formData).forEach(key => {
                        fileFormData.append(key, formData[key]);
                    });

                    console.log('Submitting form with file upload');

                    try {
                        // Use the file upload endpoint
                        response = await fetch('/Auth/api/register-with-file', {
                            method: 'POST',
                            body: fileFormData
                        });
                        console.log('File upload response status:', response.status);

                        // If we get a 403 Forbidden or any other error, fall back to regular registration
                        if (response.status === 403 || !response.ok) {
                            console.warn(`Server returned ${response.status} status. Falling back to registration without profile picture.`);
                            console.log('Using default profile image: /images/default-profile.svg');

                            // Show a toast message to inform the user
                            showToast('Unable to upload profile picture. Using default profile image instead.', 'warning');

                            // Add the default profile picture path to the form data
                            formData.profilePicture = '/images/default-profile.svg';

                            // Continue with regular registration
                            response = await fetch('/Auth/api/register', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(formData)
                            });
                        } else {
                            // Check if response is JSON
                            const contentType = response.headers.get('content-type');
                            if (!contentType || !contentType.includes('application/json')) {
                                console.warn('Server returned non-JSON response. Falling back to registration without profile picture.');

                                // Show a toast message to inform the user
                                showToast('Unable to process profile picture upload. Using default profile image instead.', 'warning');

                                // Add the default profile picture path to the form data
                                formData.profilePicture = '/images/default-profile.svg';

                                // Continue with regular registration
                                response = await fetch('/Auth/api/register', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(formData)
                                });
                            }
                        }
                    } catch (uploadError) {
                        console.error('File upload error:', uploadError);
                        console.warn('Falling back to registration without profile picture');
                        console.log('Using default profile image: /images/default-profile.svg');

                        // Show a toast message to inform the user
                        showToast('Error uploading profile picture. Using default profile image instead.', 'warning');

                        // Add the default profile picture path to the form data
                        formData.profilePicture = '/images/default-profile.svg';

                        // Continue with regular registration
                        response = await fetch('/Auth/api/register', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formData)
                        });
                    }
                } else {
                    console.log('Submitting form with JSON');
                    // Use the regular JSON endpoint
                    response = await fetch('/Auth/api/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    console.log('JSON response status:', response.status);
                }

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Server returned non-JSON response');
                }

                const data = await response.json();

                if (response.ok) {
                    // Store the token in localStorage
                    localStorage.setItem('token', data.token);
                    showToast('Registration successful!', 'success');
                    // Redirect to the appropriate page based on the response
                    window.location.href = data.redirectUrl || '/Test';
                } else {
                    showToast(data.message || 'Registration failed. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Registration error:', error);

                // Provide more specific error messages
                if (error.message.includes('non-JSON response')) {
                    showToast('Server error: The server returned an unexpected response. Please try again later or contact support.', 'error');
                } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                    showToast('Network error: Please check your internet connection and try again.', 'error');
                } else {
                    showToast('An error occurred during registration. Please try again.', 'error');
                }
            }
        });

        function showToast(message, type) {
            // Create toast element
            const toast = document.createElement('div');

            // Set background color based on type
            let bgColor = 'danger';
            if (type === 'success') {
                bgColor = 'success';
            } else if (type === 'warning') {
                bgColor = 'warning';
                // For warning, use dark text instead of white
                toast.className = `toast align-items-center text-dark bg-${bgColor} border-0 position-fixed`;
            } else {
                // For error/danger, use white text
                toast.className = `toast align-items-center text-white bg-${bgColor} border-0 position-fixed`;
            }

            // Position the toast below the navbar with higher z-index
            toast.style.top = '80px';
            toast.style.right = '20px';
            toast.style.zIndex = '1100';
            // Add shadow and better styling
            toast.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
            toast.style.minWidth = '300px';
            toast.style.fontSize = '1rem';
            toast.style.padding = '10px';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');

            // Create toast content with appropriate close button color
            const closeButtonClass = type === 'warning' ? 'btn-close' : 'btn-close btn-close-white';

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="${closeButtonClass} me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            // Add toast to body
            document.body.appendChild(toast);

            // Show toast with longer duration (5 seconds)
            const bsToast = new bootstrap.Toast(toast, {
                delay: 5000 // 5 seconds
            });
            bsToast.show();

            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    </script>
}