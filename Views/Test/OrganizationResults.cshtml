@model IEnumerable<OnlineAssessment.Web.Models.TestResult>
@using OnlineAssessment.Web.Utilities

@{
    ViewData["Title"] = "Organization Test Results";

    // Get summary results from ViewBag
    var summaryResults = ViewBag.SummaryResults as dynamic;

    // Get detailed results from ViewBag
    var detailedResults = ViewBag.DetailedResults as List<OnlineAssessment.Web.Models.TestResult>;

    // Group detailed results by test ID and username for the attempts view
    var attemptsByUser = detailedResults != null
        ? detailedResults
            .GroupBy(r => new { r.TestId, r.Username })
            .ToDictionary(
                g => $"{g.Key.TestId}_{g.Key.Username}",
                g => g.OrderByDescending(r => r.SubmittedAt).ToList()
            )
        : new Dictionary<string, List<OnlineAssessment.Web.Models.TestResult>>();
}

@section Styles {
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .simple-footer {
            margin-top: auto;
        }

        .org-results-container {
            min-height: 100vh;
            background-color: #f8fafc;
            padding: 2rem 0;
        }

        .org-results-header {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 20px 20px;
        }

        .org-results-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .org-results-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .org-results-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .org-results-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .org-results-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .org-results-table th {
            background-color: #f1f5f9;
            color: #64748b;
            font-weight: 600;
            padding: 1rem;
            text-align: left;
            border-bottom: 2px solid #e2e8f0;
        }

        .org-results-table td {
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }

        .org-results-table tr:last-child td {
            border-bottom: none;
        }

        .test-title {
            font-weight: 600;
            color: #1e293b;
        }

        .candidate-name {
            font-weight: 600;
            color: #1e293b;
        }

        .test-date {
            color: #64748b;
            font-size: 0.9rem;
        }

        .score-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .score-pass {
            background-color: #dcfce7;
            color: #166534;
        }

        .score-fail {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .view-btn {
            background-color: #eff6ff;
            color: #2563eb;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .view-btn:hover {
            background-color: #dbeafe;
            color: #1d4ed8;
            transform: translateY(-2px);
        }

        .export-btn {
            background-color: #f0fdf4;
            color: #166534;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .export-btn:hover {
            background-color: #dcfce7;
            color: #14532d;
            transform: translateY(-2px);
        }

        .attempt-badge {
            background-color: #e0e7ff;
            color: #4338ca;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        .empty-state i {
            font-size: 3rem;
            color: #94a3b8;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .empty-state p {
            color: #64748b;
            margin-bottom: 1.5rem;
        }

        .back-btn {
            background-color: white;
            color: #3b82f6;
            border: 2px solid #3b82f6;
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-btn:hover {
            background-color: #3b82f6;
            color: white;
            transform: translateY(-2px);
        }

        .filters-section {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .filter-group {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-label {
            color: #64748b;
            font-weight: 600;
            margin-right: 0.5rem;
        }

        .filter-select {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background-color: #f8fafc;
            color: #1e293b;
            font-size: 0.9rem;
            min-width: 200px;
        }

        .search-container {
            display: flex;
            align-items: center;
        }

        .search-input {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px 0 0 8px;
            font-size: 0.9rem;
            color: #1e293b;
            min-width: 200px;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
        }

        .search-button {
            background-color: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-button:hover {
            background-color: #2563eb;
        }

        .export-container {
            display: flex;
            align-items: center;
        }

        .export-button {
            background-color: #16a34a;
            color: white;
            border: none;
            border-radius: 0 8px 8px 0;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .export-button:hover {
            background-color: #15803d;
        }

        /* Attempts controls removed */

        /* Toast styles */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            min-width: 300px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            z-index: 9999;
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .toast-success {
            border-left: 4px solid #10b981;
        }

        .toast-error {
            border-left: 4px solid #ef4444;
        }

        .toast-info {
            border-left: 4px solid #3b82f6;
        }

        .toast-warning {
            border-left: 4px solid #f59e0b;
        }

        .toast-success i {
            color: #10b981;
        }

        .toast-error i {
            color: #ef4444;
        }

        .toast-info i {
            color: #3b82f6;
        }

        .toast-warning i {
            color: #f59e0b;
        }

        .toast-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: #64748b;
        }

        /* PERFORMANCE OPTIMIZATION: Add pagination styles */
        .pagination-container {
            padding: 1rem;
            background-color: #f8fafc;
            border-top: 1px solid #e2e8f0;
        }

        .page-info {
            color: #64748b;
            font-size: 0.9rem;
        }

        .pagination {
            margin-bottom: 0;
        }

        .page-item.active .page-link {
            background-color: #3b82f6;
            border-color: #3b82f6;
        }

        .page-link {
            color: #3b82f6;
        }

        .page-link:hover {
            color: #1d4ed8;
            background-color: #eff6ff;
        }

        .page-size-selector {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #64748b;
            font-size: 0.9rem;
        }

        .page-size-selector select {
            width: auto;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border: 1px solid #e2e8f0;
        }

        @@media (max-width: 768px) {
            .org-results-table {
                display: block;
                overflow-x: auto;
            }

            .org-results-title {
                font-size: 1.5rem;
            }

            .org-results-subtitle {
                font-size: 1rem;
            }

            .filter-group {
                flex-direction: column;
                align-items: stretch;
            }

            .filter-select {
                width: 100%;
            }

            /* PERFORMANCE OPTIMIZATION: Responsive pagination */
            .pagination-container {
                flex-direction: column;
                gap: 1rem;
            }

            .pagination {
                margin: 0 auto;
            }
        }
    </style>
}

<div class="org-results-container">
    <div class="org-results-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="org-results-title">Organization Test Results</h1>
                    <p class="org-results-subtitle">Monitor and analyze test performances across your organization</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="d-flex gap-3">
                        <a href="/Test/Index" class="back-btn">
                            <i class="fas fa-arrow-left"></i>
                            Back to Tests
                        </a>
                        <a href="/Test/RegenerateResults" class="btn btn-primary">
                            <i class="fas fa-sync"></i>
                            Regenerate Results
                        </a>
                        <a href="/Test/ExportDailyResults" class="btn btn-success">
                            <i class="fas fa-file-excel"></i>
                            Export Today's Results
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Ad Unit at Top of Organization Results -->
        <div class="row mb-4">
            <div class="col-12">
                @await Html.PartialAsync("_AdUnit")
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                <i class="fas fa-check-circle me-2"></i> @ViewBag.SuccessMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i> @ViewBag.ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <div class="filters-section">
            <div class="filter-group">
                <div>
                    <span class="filter-label">Test:</span>
                    <select class="filter-select" id="testFilter">
                        <option value="">All Tests</option>
                        @{
                            var testTitles = new HashSet<string>();
                            if (summaryResults != null)
                            {
                                foreach (var result in summaryResults)
                                {
                                    testTitles.Add((string)result.TestTitle);
                                }
                            }
                        }
                        @foreach (var test in testTitles)
                        {
                            <option value="@test">@test</option>
                        }
                    </select>
                </div>
                <div>
                    <span class="filter-label">Status:</span>
                    <select class="filter-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="passed">Passed</option>
                        <option value="failed">Failed</option>
                    </select>
                </div>
                <div>
                    <span class="filter-label">Date Range:</span>
                    <select class="filter-select" id="dateFilter">
                        <option value="">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                    </select>
                </div>
                <div>
                    <span class="filter-label">Search by SAP ID:</span>
                    <div class="search-container">
                        <input type="text" id="sapIdSearch" class="search-input" placeholder="Enter SAP ID...">
                        <button id="searchButton" class="search-button"><i class="fas fa-search"></i></button>
                    </div>
                </div>
                <div>
                    <span class="filter-label">Export Results:</span>
                    <div class="export-container">
                        <form id="exportForm" action="/Test/ExportDailyResults" method="get" class="d-flex gap-2">
                            <input type="date" id="exportDate" name="date" class="search-input" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                            <button type="submit" class="export-button">
                                <i class="fas fa-file-excel"></i> Export
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance message if available -->
        @if (!string.IsNullOrEmpty(ViewBag.PerformanceMessage))
        {
            <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
                <i class="fas fa-info-circle me-2"></i> @ViewBag.PerformanceMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="org-results-card">
            @if (summaryResults == null || (summaryResults is ICollection<dynamic> && ((ICollection<dynamic>)summaryResults).Count == 0))
            {
                <div class="empty-state">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>No Test Results</h3>
                    <p>No test results are available for your organization yet.</p>

                    @if (Model != null && Model.Count() > 0)
                    {
                        <div class="alert alert-info mt-4">
                            <p><i class="fas fa-info-circle"></i> We found some test results but they haven't been processed yet.</p>
                            <a href="/Test/RegenerateResults" class="btn btn-primary mt-2">
                                <i class="fas fa-sync"></i> Regenerate Results
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mt-4">
                            <p><i class="fas fa-info-circle"></i> Test results will appear here after candidates complete tests.</p>
                            <p>Make sure you have:</p>
                            <ul>
                                <li>Created tests for candidates to take</li>
                                <li>Shared the tests with candidates</li>
                                <li>Candidates have completed the tests</li>
                            </ul>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="org-results-table">
                        <thead>
                            <tr>
                                <th>Test Title</th>
                                <th>Candidate</th>
                                <th>SAP ID</th>
                                <th>Test Time</th>
                                <th>Last Attempt</th>
                                <th>Best Score</th>
                                <th>Attempts</th>
                                <th>Average Score</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody">
                            @foreach (var result in summaryResults)
                            {
                                var resultKey = $"{result.TestId}_{result.Username}";
                                var userAttempts = attemptsByUser.ContainsKey(resultKey) ? attemptsByUser[resultKey] : new List<OnlineAssessment.Web.Models.TestResult>();
                                var testId = result.TestId; // Store for later use
                                var lastAttemptId = userAttempts.Count > 0 ? userAttempts.First().Id : 0;

                                // Skip if no attempts found
                                if (userAttempts.Count == 0)
                                {
                                    continue;
                                }

                                // Get the actual test passing score instead of hardcoded 70%
                                var testPassingScore = userAttempts.Count > 0 ? userAttempts.First().Test.PassingScore : 60; // Default to 60% if no attempts
                                var totalQuestions = userAttempts.Count > 0 ? userAttempts.First().TotalQuestions : 0;
                                var actualPassThreshold = totalQuestions * (testPassingScore / 100.0);
                                <tr class="result-row"
                                    data-test="@result.TestTitle"
                                    data-status="@(result.BestScore >= actualPassThreshold ? "passed" : "failed")"
                                    data-date="@TimeZoneHelper.ToIst(result.LastAttemptDate).ToString("yyyy-MM-dd")"
                                    data-sapid="@(string.IsNullOrEmpty(result.UserSapId) ? "N/A" : result.UserSapId)">
                                    <td>
                                        <div class="test-title">@result.TestTitle</div>
                                        <div class="test-date">Last taken: @TimeZoneHelper.ToIst(result.LastAttemptDate).ToString("MMM dd, yyyy HH:mm")</div>
                                    </td>
                                    <td>
                                        <div class="candidate-name">@result.Username</div>
                                    </td>
                                    <td>
                                        <div class="sap-id">@(string.IsNullOrEmpty(result.UserSapId) ? "N/A" : result.UserSapId)</div>
                                    </td>
                                    <td>
                                        @try
                                        {
                                            <div class="test-time">
                                                @if (result.StartTime.HasValue && result.EndTime.HasValue)
                                                {
                                                    var startTime = TimeZoneHelper.ToIst(result.StartTime.Value);
                                                    var endTime = TimeZoneHelper.ToIst(result.EndTime.Value);
                                                    @(startTime.ToString("hh:mm tt") + " - " + endTime.ToString("hh:mm tt"))
                                                }
                                                else
                                                {
                                                    @("N/A")
                                                }
                                            </div>
                                        }
                                        catch
                                        {
                                            <div class="test-time">N/A</div>
                                        }
                                    </td>
                                    <td>@TimeZoneHelper.ToIst(result.LastAttemptDate).ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <span class="score-badge @(result.BestScore >= actualPassThreshold ? "score-pass" : "score-fail")">
                                            @result.BestScore.ToString("0") / @totalQuestions
                                        </span>
                                    </td>
                                    <td>
                                        <span class="attempt-badge">
                                            <i class="fas fa-redo-alt"></i> <span class="attempts-count">@result.TotalAttempts</span>
                                            @if (userAttempts.Count > 0 && userAttempts.First().AttemptNumber > 0)
                                            {
                                                <span class="ms-1">(Last: #@userAttempts.First().AttemptNumber)</span>
                                            }
                                        </span>
                                    </td>
                                    <td>
                                        <span class="score-badge">
                                            @result.AverageScore.ToString("0") / @totalQuestions
                                        </span>
                                    </td>
                                    <td>
                                        <span class="score-badge @(result.BestScore >= actualPassThreshold ? "score-pass" : "score-fail")">
                                            @(result.BestScore >= actualPassThreshold ? "PASSED" : "FAILED")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <a href="/Test/Result/@lastAttemptId" class="view-btn">
                                                <i class="fas fa-eye"></i>
                                                View
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- PERFORMANCE OPTIMIZATION: Add pagination controls -->
                @if (ViewBag.TotalPages > 1)
                {
                    <div class="pagination-container mt-4 d-flex justify-content-between align-items-center">
                        <div class="page-info">
                            Showing page @ViewBag.CurrentPage of @ViewBag.TotalPages (@ViewBag.TotalCount total results)
                        </div>
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                @if (ViewBag.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("OrganizationResults", new { page = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize })" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                }

                                @{
                                    int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                                    int endPage = Math.Min(ViewBag.TotalPages, startPage + 4);

                                    if (endPage - startPage < 4 && startPage > 1)
                                    {
                                        startPage = Math.Max(1, endPage - 4);
                                    }
                                }

                                @for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("OrganizationResults", new { page = i, pageSize = ViewBag.PageSize })">@i</a>
                                    </li>
                                }

                                @if (ViewBag.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("OrganizationResults", new { page = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize })" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <a class="page-link" href="#" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                        <div class="page-size-selector">
                            <label for="pageSize">Items per page:</label>
                            <select id="pageSize" class="form-select form-select-sm" onchange="changePageSize(this.value)">
                                @{
                                    var pageSize = ViewBag.PageSize ?? 50;
                                }
                                <option value="25">25</option>
                                <option value="50" selected>50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    @Html.AntiForgeryToken()
    <script>
        // Function to handle page size changes
        function changePageSize(size) {
            window.location.href = '@Url.Action("OrganizationResults")' + '?page=1&pageSize=' + size;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const testFilter = document.getElementById('testFilter');
            const statusFilter = document.getElementById('statusFilter');
            const dateFilter = document.getElementById('dateFilter');
            const sapIdSearch = document.getElementById('sapIdSearch');
            const searchButton = document.getElementById('searchButton');
            const resultRows = document.querySelectorAll('.result-row');
            const originalEmptyState = document.querySelector('.empty-state');
            const table = document.querySelector('.table-responsive');

            // PERFORMANCE OPTIMIZATION: Add loading indicator for pagination links
            document.querySelectorAll('.pagination .page-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    if (!this.classList.contains('disabled') && !this.parentElement.classList.contains('active')) {
                        showToast('Loading page...', 'info');
                    }
                });
            });

            // Add event listener for search button
            searchButton.addEventListener('click', function() {
                filterResults();
            });

            // Add event listener for Enter key in search input
            sapIdSearch.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    filterResults();
                }
            });

            function filterResults() {
                const selectedTest = testFilter.value;
                const selectedStatus = statusFilter.value;
                const selectedDate = dateFilter.value;
                const searchSapId = sapIdSearch.value.trim().toLowerCase();
                const today = new Date();
                const startOfWeek = new Date(today);
                startOfWeek.setDate(today.getDate() - today.getDay());
                const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

                let visibleCount = 0;

                resultRows.forEach(row => {
                    const test = row.dataset.test;
                    const status = row.dataset.status;
                    const date = new Date(row.dataset.date);

                    // Get SAP ID from the row data attribute (more reliable)
                    const sapIdText = (row.dataset.sapid || '').toLowerCase();

                    let showRow = true;

                    // Test filter
                    if (selectedTest && test !== selectedTest) {
                        showRow = false;
                    }

                    // Status filter
                    if (selectedStatus && status !== selectedStatus) {
                        showRow = false;
                    }

                    // SAP ID search
                    if (searchSapId && !sapIdText.includes(searchSapId)) {
                        showRow = false;
                    }

                    // Date filter
                    if (selectedDate) {
                        switch (selectedDate) {
                            case 'today':
                                if (date.toDateString() !== today.toDateString()) {
                                    showRow = false;
                                }
                                break;
                            case 'week':
                                if (date < startOfWeek) {
                                    showRow = false;
                                }
                                break;
                            case 'month':
                                if (date < startOfMonth) {
                                    showRow = false;
                                }
                                break;
                        }
                    }

                    if (showRow) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Handle empty state
                if (visibleCount === 0) {
                    // Remove any existing empty state
                    const existingEmptyState = document.querySelector('.empty-state');
                    if (existingEmptyState) {
                        existingEmptyState.remove();
                    }

                    // Create and show new empty state
                    const newEmptyState = document.createElement('div');
                    newEmptyState.className = 'empty-state';
                    newEmptyState.innerHTML = `
                        <i class="fas fa-search"></i>
                        <h3>No Results Found</h3>
                        <p>No test results match your selected filters.</p>
                        <button class="view-btn mt-3" onclick="resetFilters()">
                            <i class="fas fa-undo"></i>
                            Reset Filters
                        </button>
                    `;

                    if (table) {
                        table.style.display = 'none';
                        table.parentNode.insertBefore(newEmptyState, table);
                    }
                } else {
                    // Remove empty state if it exists
                    const emptyState = document.querySelector('.empty-state');
                    if (emptyState) {
                        emptyState.remove();
                    }

                    if (table) {
                        table.style.display = '';
                    }
                }
            }

            // Add event listeners to filters
            testFilter.addEventListener('change', filterResults);
            statusFilter.addEventListener('change', filterResults);
            dateFilter.addEventListener('change', filterResults);

            // Reset filters function
            window.resetFilters = function() {
                testFilter.value = '';
                statusFilter.value = '';
                dateFilter.value = '';
                filterResults();
            };
        });

        // All Attempts functionality removed

        function exportResult(resultId) {
            // Add export functionality here
            console.log('Exporting result:', resultId);
        }

        // Attempts update functionality removed

        // Function to show toast messages
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `
                <div class="toast-content">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                    <span>${message}</span>
                </div>
                <button class="toast-close" onclick="this.parentNode.remove()">&times;</button>
            `;

            document.body.appendChild(toast);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (document.body.contains(toast)) {
                    toast.remove();
                }
            }, 5000);
        }
    </script>
}

<!-- Attempts Modal removed -->