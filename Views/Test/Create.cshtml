@model OnlineAssessment.Web.Models.Test

@{
    ViewData["Title"] = "Create Test";
}

@section Styles {
    <style>
        :root {
            --primary-color: #2563eb;
            --primary-hover: #1d4ed8;
            --success-color: #22c55e;
            --info-color: #3b82f6;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #1e1e1e;
            --light-bg: #f8fafc;
            --border-color: #e2e8f0;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --card-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            --hover-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .simple-footer {
            margin-top: auto;
        }

        .container {
            max-width: 1000px;
            padding: 2rem;
        }

        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            padding: 2rem;
            border-radius: 1rem;
            margin-bottom: 2rem;
            box-shadow: var(--card-shadow);
        }

        .page-header h3 {
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .page-header p {
            opacity: 0.9;
            margin-bottom: 0;
        }

        .form-card {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
            background-color: white;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
        }

        .form-card:hover {
            box-shadow: var(--hover-shadow);
        }

        .form-card .card-header {
            background: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem;
        }

        .form-card .card-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .form-card .card-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .input-group-text {
            background-color: var(--light-bg);
            border: 1px solid var(--border-color);
            color: var(--text-secondary);
            border-radius: 0 0.75rem 0.75rem 0;
        }

        .input-group .form-control {
            border-radius: 0.75rem 0 0 0.75rem;
        }

        .form-text {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            border: none;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(37, 99, 235, 0.3);
        }

        .btn-outline-primary {
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .btn-outline-secondary {
            border: 1px solid var(--text-secondary);
            color: var(--text-secondary);
        }

        .btn-outline-secondary:hover {
            background-color: var(--text-secondary);
            color: white;
            transform: translateY(-2px);
        }

        .btn-lg {
            padding: 1rem 2rem;
            font-size: 1.125rem;
        }

        .question-card {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
            background-color: white;
            box-shadow: var(--card-shadow);
            margin-top: 1.5rem;
        }

        .question-card .card-header {
            background: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
            padding: 1.25rem;
        }

        .question-card .card-header h5 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }

        .question-card .card-body {
            padding: 1.5rem;
        }

        .alert {
            border: none;
            border-radius: 0.75rem;
            padding: 1rem 1.25rem;
            margin-top: 1rem;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #166534;
        }

        .alert-danger {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .alert-warning {
            background-color: #fef3c7;
            color: #92400e;
        }

        .alert-info {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .form-check {
            margin-bottom: 1rem;
        }

        .form-check-input {
            width: 1.25rem;
            height: 1.25rem;
            margin-top: 0.2rem;
            border: 1px solid var(--border-color);
        }

        .form-check-input:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .form-check-label {
            padding-left: 0.5rem;
            font-size: 1rem;
            color: var(--text-primary);
        }

        .invalid-feedback {
            color: var(--danger-color);
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .was-validated .form-control:invalid, .was-validated .form-select:invalid {
            border-color: var(--danger-color);
        }

        .was-validated .form-control:valid, .was-validated .form-select:valid {
            border-color: var(--success-color);
        }

        .file-upload-wrapper {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .file-upload-input {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-upload-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            background-color: var(--light-bg);
            border: 2px dashed var(--border-color);
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .file-upload-label:hover {
            border-color: var(--primary-color);
            background-color: rgba(37, 99, 235, 0.05);
        }

        .file-upload-icon {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .file-upload-text {
            text-align: center;
        }

        .file-upload-text h5 {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .file-upload-text p {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-bottom: 0;
        }

        .file-name {
            margin-top: 0.5rem;
            font-size: 0.875rem;
            color: var(--primary-color);
            font-weight: 500;
        }

        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .page-header {
                padding: 1.5rem;
            }

            .form-card .card-body {
                padding: 1.5rem;
            }
        }
    </style>
}

<div class="container">
    <div class="page-header">
        <h3><i class="fas fa-plus-circle"></i> Create New Test</h3>
        <p>Fill in the details below to create a new test for your students</p>
    </div>

    <div class="form-card">
        <div class="card-header">
            <h3><i class="fas fa-edit"></i> Test Details</h3>
        </div>
        <div class="card-body">
            <form id="createTestForm" class="needs-validation" novalidate>
                <div class="form-group mb-4">
                    <label for="title" class="form-label">Test Title</label>
                    <input type="text" class="form-control" id="title" name="title" required
                        placeholder="Enter a descriptive title for your test">
                    <div class="invalid-feedback">Please provide a test title.</div>
                </div>

                <div class="form-group mb-4">
                    <label for="description" class="form-label">Description</label>
                    <textarea class="form-control" id="description" name="description" rows="4"
                        placeholder="Provide a detailed description of the test"></textarea>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-4">
                            <label for="duration" class="form-label">Duration (minutes)</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="duration" name="durationMinutes"
                                    min="1" max="1440" required>
                                <span class="input-group-text">min</span>
                            </div>
                            <div class="invalid-feedback">Duration must be between 1 and 1440 minutes.</div>
                        </div>
                    </div>

                    <!-- MaxStudents field removed as per requirement -->
                </div>

                <div class="form-group mb-4">
                    <label for="maxAttempts" class="form-label">Attempts per Student</label>
                    <div class="input-group">
                        <input type="number" class="form-control" id="maxAttempts" name="maxAttempts"
                            min="1" value="1" required>
                        <span class="input-group-text">attempts</span>
                    </div>
                    <small class="form-text">Number of times each student can attempt this test</small>
                </div>

                <div class="form-group mb-4">
                    <label for="price" class="form-label">Test Price</label>
                    <div class="input-group">
                        <span class="input-group-text">₹</span>
                        <input type="number" class="form-control" id="price" name="price"
                            min="0" max="100000" step="0.01" value="1.00" required>
                    </div>
                    <small class="form-text">Price that students will pay to take this test (default: ₹1.00)</small>
                </div>

                <div class="form-group mb-4">
                    <label for="passingScore" class="form-label">Passing Score (%)</label>
                    <div class="input-group">
                        <input type="number" class="form-control" id="passingScore" name="passingScore"
                            min="0" max="100" value="60" required>
                        <span class="input-group-text">%</span>
                    </div>
                    <small class="form-text">Minimum percentage score required to pass the test (default: 60%)</small>
                </div>

                <div class="form-group mb-4">
                    <label for="testType" class="form-label">Test Type</label>
                    <select class="form-select" id="testType" name="type" required>
                        <option value="0">Multiple Choice Questions</option>
                    </select>
                    <div class="invalid-feedback">Please select a test type.</div>
                </div>

                <div class="form-group mb-4">
                    <label for="domain" class="form-label">Domain/Category</label>
                    <select class="form-select" id="domain" name="domain" required>
                        <option value="">Select Category</option>
                        <option value="BFSI Internship">BFSI Internship</option>
                        <option value="Digital Marketing  Internships">Digital Marketing  Internships</option>
                        <option value="IT Internships">IT Internships</option>
                        <option value="Relationship Executive Internships">Relationship Executive Internships</option>
                        <option value="Business Development Internships">Business Development Internships</option>
                        <option value="Sales Internships">Sales Internships</option>
                        <option value="Portfolio Internships">Portfolio Internships</option>
                        <option value="Web Development Internships">Web Development Internships</option>
                        <option value="Software Development Internships">Software Development Internships</option>
                        <option value="Pharma Intern">Pharma Intern</option>
                        <option value="Medical Coding Intern">Medical Coding Intern</option>
                        <option value="AI">AI</option>
                        <option value="DataScience">DataScience</option>
                        <option value="Cybersecurity">Cybersecurity</option>
                        <option value="Human Resource">Human Resource</option>
                        <option value="Financial Analyst">Financial Analyst</option>
                        <option value="Data Analyst">Data Analyst</option>
                    </select>
                    <small class="form-text">Select the domain/category for this test. Only candidates who selected this domain during registration will see this test.</small>
                    <div class="invalid-feedback">Please select a domain.</div>
                </div>

                <div class="question-card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-info-circle"></i> Test Booking Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="fas fa-calendar-alt"></i> <strong>Test Scheduling:</strong> Test scheduling is now handled by the booking system. Users will be able to book available slots after test creation.
                        </div>
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i> <strong>Important:</strong> Users will need to pay to book a slot for this test. There are 5 slots available per day for 7 days.
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="isScheduleRestricted" name="isScheduleRestricted">
                            <label class="form-check-label" for="isScheduleRestricted">
                                Restrict test access to booked time slots only
                            </label>
                            <small class="form-text d-block">If checked, the test will only be accessible during the user's booked time slot.</small>
                        </div>
                    </div>
                </div>

                <div class="question-card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-question-circle"></i> Test Questions</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label">Question Source</label>
                            <input type="hidden" name="questionSource" id="sourceCategory" value="category">
                        </div>

                        <!-- Category Questions Section -->
                        <div id="categoryQuestionsSection">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i> Questions will be randomly selected from your category question bank.
                            </div>
                            <div class="form-group mb-3">
                                <label for="questionCount" class="form-label">Number of Questions</label>
                                <input type="number" class="form-control" id="questionCount" min="60" max="100" value="60">
                                <small class="form-text">How many questions to include in the test (minimum 60)</small>
                            </div>
                            <div id="noCategoryQuestionsWarning" class="alert alert-warning d-none">
                                <i class="fas fa-exclamation-triangle"></i> No questions available for this category. Please upload questions first or select a different category.
                            </div>
                        </div>

                        <!-- No upload questions section needed -->
                    </div>
                </div>

                <div class="d-grid gap-3 mt-5">
                    <button id="createTestBtn" type="submit" class="btn btn-primary btn-lg" disabled>
                        <i class="fas fa-save"></i> Create Test
                    </button>
                    <p id="createTestDisabledMessage" class="text-danger text-center">
                        <i class="fas fa-exclamation-triangle"></i> Please select a domain with available questions.
                    </p>
                    <a href="/Test" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i> Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let createdTestId = null;

        // Function to show toast messages
        function showToast(message, type = 'info') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.style.position = 'fixed';
                toastContainer.style.top = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }

            // Create toast element
            const toast = document.createElement('div');
            toast.style.minWidth = '250px';
            toast.style.margin = '10px';
            toast.style.padding = '15px';
            toast.style.borderRadius = '4px';
            toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
            toast.style.transition = 'all 0.3s ease';
            toast.style.opacity = '0';
            toast.style.transform = 'translateY(-20px)';

            // Set background color based on type
            switch(type) {
                case 'success':
                    toast.style.backgroundColor = '#dcfce7';
                    toast.style.color = '#166534';
                    break;
                case 'error':
                    toast.style.backgroundColor = '#fee2e2';
                    toast.style.color = '#991b1b';
                    break;
                case 'warning':
                    toast.style.backgroundColor = '#fef3c7';
                    toast.style.color = '#92400e';
                    break;
                default: // info
                    toast.style.backgroundColor = '#dbeafe';
                    toast.style.color = '#1e40af';
            }

            // Set message
            toast.textContent = message;

            // Add to container
            toastContainer.appendChild(toast);

            // Animate in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 10);

            // Remove after 5 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    toastContainer.removeChild(toast);
                }, 300);
            }, 5000);
        }

        // Function to enable/disable the Create Test button
        function updateCreateTestButton() {
            // This function is now handled by checkCategoryQuestions
            // We'll just call that function instead
            checkCategoryQuestions();
        }

        // Update button state when test type changes
        document.getElementById('testType').addEventListener('change', function() {
            updateCreateTestButton();
        });

        // Make sure category questions section is visible
        const categorySection = document.getElementById('categoryQuestionsSection');
        categorySection.classList.remove('d-none');

        // Check if category has questions when domain changes
        document.getElementById('domain').addEventListener('change', function() {
            checkCategoryQuestions();
            updateCreateTestButton();
        });

        // Function to check if the selected category has questions
        async function checkCategoryQuestions() {
            const domain = document.getElementById('domain').value;
            const warningElement = document.getElementById('noCategoryQuestionsWarning');
            const createTestBtn = document.getElementById('createTestBtn');
            const createTestDisabledMessage = document.getElementById('createTestDisabledMessage');

            if (!domain) {
                warningElement.classList.add('d-none');
                createTestBtn.disabled = true;
                createTestDisabledMessage.style.display = 'block';
                return;
            }

            console.log(`Checking questions for category: ${domain}`);

            // Clear any previous error message
            warningElement.textContent = '';
            warningElement.className = 'alert alert-warning d-none';

            try {
                // Add a cache-busting parameter to avoid cached responses
                const timestamp = new Date().getTime();
                // Add limit=0 to just check if questions exist without loading them all
                const response = await fetch(`/api/CategoryQuestions/GetByCategory?category=${encodeURIComponent(domain)}&limit=0&_=${timestamp}`, {
                    headers: {
                        'Cache-Control': 'no-cache, no-store',
                        'Pragma': 'no-cache'
                    }
                });

                console.log(`Response status: ${response.status}`);

                if (response.ok) {
                    // Try to parse the response to verify it contains questions
                    let data;
                    try {
                        data = await response.json();
                        console.log(`Questions found: ${data.totalCount || 0}`);
                    } catch (parseError) {
                        console.error('Error parsing JSON response:', parseError);
                        warningElement.textContent = `Error parsing response data. Please try again.`;
                        warningElement.className = 'alert alert-danger';
                        warningElement.classList.remove('d-none');
                        createTestBtn.disabled = true;
                        createTestDisabledMessage.style.display = 'block';
                        return;
                    }

                    // Log the entire response data for debugging
                    console.log('Response data:', data);

                    // Check if we have questions or at least a totalCount
                    if ((data.questions && data.questions.length > 0) || (data.totalCount && data.totalCount > 0)) {
                        // We have questions, enable the button
                        createTestBtn.disabled = false;
                        createTestDisabledMessage.style.display = 'none';

                        // Get the count from either the array length or the totalCount field
                        const questionCount = data.totalCount || (data.questions ? data.questions.length : 0);
                        console.log(`Category ${domain} has ${questionCount} questions available`);

                        // Show a success message
                        warningElement.textContent = `Found ${questionCount} questions for category "${domain}".`;
                        warningElement.className = 'alert alert-success';
                        warningElement.classList.remove('d-none');

                        // Check if there are enough questions
                        if (questionCount < 60) {
                            warningElement.textContent = `Found only ${questionCount} questions for category "${domain}". At least 60 questions are required.`;
                            warningElement.className = 'alert alert-warning';
                            createTestBtn.disabled = true;
                            createTestDisabledMessage.style.display = 'block';
                        }
                    } else {
                        console.warn(`Category ${domain} returned success but no questions detected`);
                        warningElement.textContent = `No questions found for category "${domain}". Please upload questions first.`;
                        warningElement.className = 'alert alert-warning';
                        warningElement.classList.remove('d-none');
                        createTestBtn.disabled = true;
                        createTestDisabledMessage.style.display = 'block';
                    }
                } else {
                    // Try to get error details
                    let errorMessage = `No questions available for category "${domain}". Please upload questions first.`;
                    try {
                        const errorData = await response.json();
                        if (errorData && errorData.message) {
                            errorMessage = errorData.message;
                            console.warn(`Error from API: ${errorMessage}`);
                        }
                    } catch (parseError) {
                        console.error('Could not parse error response:', parseError);
                    }

                    warningElement.textContent = errorMessage;
                    warningElement.className = 'alert alert-warning';
                    warningElement.classList.remove('d-none');
                    createTestBtn.disabled = true;
                    createTestDisabledMessage.style.display = 'block';
                }
            } catch (error) {
                console.error('Error checking category questions:', error);
                warningElement.textContent = `Error checking questions: ${error.message}. Please try again.`;
                warningElement.className = 'alert alert-danger';
                warningElement.classList.remove('d-none');
                createTestBtn.disabled = true;
                createTestDisabledMessage.style.display = 'block';
            }
        }




        // Form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // No scheduling options to handle - removed

        // Handle form submission
        document.getElementById('createTestForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            // Check if the category has questions
            const domain = document.getElementById('domain').value.trim();
            if (!domain) {
                showToast('Please select a domain/category', 'warning');
                return;
            }

            try {
                // Add a cache-busting parameter to avoid cached responses
                const timestamp = new Date().getTime();
                // Add limit=0 to just check if questions exist without loading them all
                const response = await fetch(`/api/CategoryQuestions/GetByCategory?category=${encodeURIComponent(domain)}&limit=0&_=${timestamp}`, {
                    headers: {
                        'Cache-Control': 'no-cache, no-store',
                        'Pragma': 'no-cache'
                    }
                });

                console.log(`Form submission - category check response status: ${response.status}`);

                if (!response.ok) {
                    // Try to get error details
                    let errorMessage = 'No questions available for this category. Please upload questions first.';
                    try {
                        const errorData = await response.json();
                        if (errorData && errorData.message) {
                            errorMessage = errorData.message;
                        }
                    } catch (parseError) {
                        console.error('Could not parse error response:', parseError);
                    }

                    showToast(errorMessage, 'warning');
                    return;
                }

                // Verify that there are actually questions
                const data = await response.json();
                console.log('Form submission - category data:', data);

                // Check if we have questions or at least a totalCount
                if ((!data.questions || data.questions.length === 0) && (!data.totalCount || data.totalCount === 0)) {
                    showToast('No questions found for this category. Please upload questions first.', 'warning');
                    return;
                }

                // Get the count from either the array length or the totalCount field
                const questionCount = data.totalCount || (data.questions ? data.questions.length : 0);

                // Check if there are enough questions
                if (questionCount < 60) {
                    showToast(`Found only ${questionCount} questions for category "${domain}". At least 60 questions are required.`, 'warning');
                    return;
                }

                console.log(`Form submission - found ${questionCount} questions for category ${domain}`);
            } catch (error) {
                console.error('Error checking category questions:', error);
                showToast(`Error checking category questions: ${error.message}`, 'error');
                return;
            }

            try {
                // Get the form values
                const title = document.getElementById('title').value.trim();
                const description = document.getElementById('description').value.trim();
                const durationMinutes = parseInt(document.getElementById('duration').value);
                // MaxStudents field removed as per requirement
                const maxAttempts = parseInt(document.getElementById('maxAttempts').value);
                const type = parseInt(document.getElementById('testType').value);
                const domain = document.getElementById('domain').value.trim();
                const passingScore = parseInt(document.getElementById('passingScore').value);

                // Validate form values
                if (!title) {
                    throw new Error('Test title is required');
                }
                if (isNaN(durationMinutes) || durationMinutes <= 0 || durationMinutes > 1440) {
                    throw new Error('Duration must be between 1 and 1440 minutes');
                }
                // MaxStudents validation removed as per requirement
                if (isNaN(maxAttempts) || maxAttempts < 1) {
                    throw new Error('Maximum number of attempts must be at least 1');
                }
                if (isNaN(type)) {
                    throw new Error('Invalid test type');
                }
                if (!domain) {
                    throw new Error('Domain is required');
                }
                if (isNaN(passingScore) || passingScore < 0 || passingScore > 100) {
                    throw new Error('Passing score must be between 0 and 100');
                }

                // Create the test object
                const test = {
                    Title: title,
                    Description: description,
                    DurationMinutes: durationMinutes,
                    // MaxStudents field removed as per requirement
                    MaxAttempts: maxAttempts,
                    Type: type,
                    Domain: domain,
                    Price: parseFloat(document.getElementById('price').value),
                    PassingScore: passingScore,
                    IsScheduleRestricted: document.getElementById('isScheduleRestricted').checked
                };

                // Scheduling information is now handled by the booking system

                // Add question count information
                const questionCount = parseInt(document.getElementById('questionCount').value) || 60;

                // Validate minimum question count
                if (questionCount < 60) {
                    throw new Error('At least 60 questions are required for the test');
                }

                test.UseCategory = true;
                test.QuestionCount = questionCount;

                console.log('Sending test data:', test);

                console.log('Sending test creation request with data:', JSON.stringify(test));

                let result;
                try {
                    const response = await fetch('/api/TestApi/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'Cache-Control': 'no-cache, no-store',
                            'Pragma': 'no-cache'
                        },
                        body: JSON.stringify(test)
                    });

                    console.log('Test creation response status:', response.status);

                    try {
                        result = await response.json();
                        console.log('Server response:', result);
                    } catch (parseError) {
                        console.error('Error parsing response:', parseError);
                        throw new Error('Could not parse server response. Please try again.');
                    }

                    if (!response.ok) {
                        console.error('Server returned error:', result);
                        throw new Error(result.message || 'Server error: ' + response.status);
                    }

                    // Check if the result contains the expected fields
                    if (!result.testId) {
                        console.warn('Response missing testId:', result);
                    }
                } catch (fetchError) {
                    console.error('Fetch error during test creation:', fetchError);
                    throw fetchError;
                }

                if (result && result.testId) {
                    createdTestId = result.testId;
                } else {
                    console.error('Missing testId in result:', result);
                    throw new Error('Server returned an invalid response. Please try again.');
                }

                // Show success message
                showToast('Test created successfully!', 'success');

                // Redirect to the Test Index page with testCreated parameter after a short delay
                setTimeout(() => {
                    window.location.href = result.redirectUrl || '/Test';
                }, 2000);

            } catch (error) {
                console.error('Error:', error);
                showToast('Error creating test: ' + error.message, 'error');
            }
        });

        // No upload function needed


    </script>
}