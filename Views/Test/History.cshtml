@model IEnumerable<OnlineAssessment.Web.Models.TestResult>

@{
    ViewData["Title"] = "Test History";
    // Group test results by test title and order by most recent attempt
    var groupedTests = Model.Where(r => r.Test != null) // Filter out results with null Test
        .GroupBy(r => r.TestId)
        .Select(g => new {
            TestId = g.Key,
            TestTitle = g.First().Test.Title,
            // Use the maximum AttemptNumber from the attempts as the AttemptCount
            // This ensures it's consistent with what's shown in other views
            AttemptCount = g.Max(r => r.AttemptNumber),
            LastAttempt = g.OrderByDescending(r => r.SubmittedAt).First(),
            BestScore = g.Max(r => r.Score)
        })
        .OrderByDescending(g => g.LastAttempt.SubmittedAt)
        .ToList();
}

@section Styles {
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .simple-footer {
            margin-top: auto;
        }

        .history-container {
            min-height: 100vh;
            background-color: #f8fafc;
            padding: 2rem 0;
        }

        .history-header {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 20px 20px;
        }

        .history-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .history-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .history-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .history-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .history-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .history-table th {
            background-color: #f1f5f9;
            color: #64748b;
            font-weight: 600;
            padding: 1rem;
            text-align: left;
            border-bottom: 2px solid #e2e8f0;
        }

        .history-table td {
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }

        .history-table tr:last-child td {
            border-bottom: none;
        }

        .test-title {
            font-weight: 600;
            color: #1e293b;
        }

        .test-date {
            color: #64748b;
            font-size: 0.9rem;
        }

        .score-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .score-pass {
            background-color: #dcfce7;
            color: #166534;
        }

        .score-fail {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .view-btn {
            background-color: #eff6ff;
            color: #2563eb;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .view-btn:hover {
            background-color: #dbeafe;
            color: #1d4ed8;
            transform: translateY(-2px);
        }

        .retake-btn {
            background-color: #fff7ed;
            color: #ea580c;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .retake-btn:hover {
            background-color: #ffedd5;
            color: #c2410c;
            transform: translateY(-2px);
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        .empty-state i {
            font-size: 3rem;
            color: #94a3b8;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .empty-state p {
            color: #64748b;
            margin-bottom: 1.5rem;
        }

        .back-btn {
            background-color: white;
            color: #3b82f6;
            border: 2px solid #3b82f6;
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .back-btn:hover {
            background-color: #3b82f6;
            color: white;
            transform: translateY(-2px);
        }

        .attempt-badge {
            background-color: #e0e7ff;
            color: #4338ca;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .slot-badge {
            background-color: #e0f2fe;
            color: #0369a1;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        @@media (max-width: 768px) {
            .history-table {
                display: block;
                overflow-x: auto;
            }

            .history-title {
                font-size: 1.5rem;
            }

            .history-subtitle {
                font-size: 1rem;
            }
        }
    </style>
}

<div class="history-container">
    <div class="history-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="history-title">Test History</h1>
                    <p class="history-subtitle">Track your progress and review your past test performances</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="/Test/Index" class="back-btn">
                        <i class="fas fa-arrow-left"></i>
                        Back to Tests
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Ad Unit at Top of History Page -->
        <div class="row mb-4">
            <div class="col-12">
                @await Html.PartialAsync("_AdUnit")
            </div>
        </div>

        @* Alert notifications have been replaced with toast notifications *@

        <div class="history-card">
            @if (!groupedTests.Any())
            {
                <div class="empty-state">
                    <i class="fas fa-clipboard-list"></i>
                    <h3>No Test History</h3>
                    <p>You haven't taken any tests yet. Start your learning journey today!</p>
                    <a href="/Test/Index" class="view-btn">
                        <i class="fas fa-play"></i>
                        Take a Test
                    </a>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="history-table">
                        <thead>
                            <tr>
                                <th>Test Title</th>
                                <th>SAP ID</th>
                                <th>Last Attempt</th>
                                <th>Slot</th>
                                <th>Best Score</th>
                                <th>Attempts</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var testGroup in groupedTests)
                            {
                                <tr>
                                    <td>
                                        <div class="test-title">@testGroup.TestTitle</div>
                                        <div class="test-date">Last taken: @OnlineAssessment.Web.Utilities.TimeZoneHelper.ToIst(testGroup.LastAttempt.SubmittedAt).ToString("MMM dd, yyyy HH:mm")</div>
                                    </td>
                                    <td>@ViewBag.UserSapId</td>
                                    <td>@OnlineAssessment.Web.Utilities.TimeZoneHelper.ToIst(testGroup.LastAttempt.SubmittedAt).ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <span class="slot-badge">
                                            <i class="fas fa-clock"></i>
                                            @if (testGroup.LastAttempt.StartTime.HasValue && testGroup.LastAttempt.EndTime.HasValue)
                                            {
                                                @(testGroup.LastAttempt.StartTime.Value.ToString("hh:mm tt") + " - " + testGroup.LastAttempt.EndTime.Value.ToString("hh:mm tt"))
                                            }
                                            else
                                            {
                                                @("N/A")
                                            }
                                        </span>
                                    </td>
                                    <td>
                                        <span class="score-badge @(testGroup.BestScore >= 70 ? "score-pass" : "score-fail")">
                                            @testGroup.BestScore.ToString("0")%
                                        </span>
                                    </td>
                                    <td>
                                        <span class="attempt-badge">
                                            <i class="fas fa-redo-alt"></i> @testGroup.AttemptCount
                                            @if (testGroup.LastAttempt.AttemptNumber > 0)
                                            {
                                                <span class="ms-1">(Last: #@testGroup.LastAttempt.AttemptNumber)</span>
                                            }
                                        </span>
                                    </td>
                                    <td>
                                        @{
                                            // Use the actual test passing score instead of hardcoded 70
                                            var passThreshold = testGroup.LastAttempt.TotalQuestions * (testGroup.LastAttempt.Test.PassingScore / 100.0);
                                            var isPassed = testGroup.BestScore >= passThreshold;
                                        }
                                        <span class="score-badge @(isPassed ? "score-pass" : "score-fail")">
                                            @(isPassed ? "PASSED" : "FAILED")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2">
                                            <a href="@Url.Action("Result", "Test", new { id = testGroup.LastAttempt.Id, forceLatest = true })" class="view-btn">
                                                <i class="fas fa-eye"></i>
                                                View Latest Result
                                            </a>
                                            <a href="@Url.Action("BookSlot", "Test", new { id = testGroup.TestId, isReattempt = true })" class="retake-btn">
                                                <i class="fas fa-redo"></i>
                                                Retake Test
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <!-- Ad Unit at Bottom of History Page -->
        <div class="row mt-4">
            <div class="col-12">
                @await Html.PartialAsync("_AdUnit")
            </div>
        </div>
    </div>
</div>